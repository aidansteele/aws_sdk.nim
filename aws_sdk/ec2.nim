# This file is autogenerated, do not modify
import packedjson, asyncfutures,asyncdispatch,xmlparser,xmltree,strutils,db_mysql,threadpool,times,sequtils,tables
import utils/client
import credentials

export client.new
const awsApiMD_apiVersion* = "2016-11-15"
const awsApiMD_endpointPrefix* = "ec2"
const awsApiMD_protocol* = "ec2"
const awsApiMD_serviceAbbreviation* = "Amazon EC2"
const awsApiMD_serviceFullName* = "Amazon Elastic Compute Cloud"
const awsApiMD_serviceId* = "EC2"
const awsApiMD_signatureVersion* = "v4"
const awsApiMD_uid* = "ec2-2016-11-15"
const awsApiMD_xmlNamespace* = "http://ec2.amazonaws.com/doc/2016-11-15"
defineClient(EC2)

proc acceptReservedInstancesExchangeQuote*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptReservedInstancesExchangeQuote",r)
proc acceptVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptVpcEndpointConnections",r)
proc acceptVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptVpcPeeringConnection",r)
proc allocateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AllocateAddress",r)
proc allocateHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AllocateHosts",r)
proc assignIpv6Addresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssignIpv6Addresses",r)
proc assignPrivateIpAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssignPrivateIpAddresses",r)
proc associateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateAddress",r)
proc associateDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateDhcpOptions",r)
proc associateIamInstanceProfile*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateIamInstanceProfile",r)
proc associateRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateRouteTable",r)
proc associateSubnetCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateSubnetCidrBlock",r)
proc associateVpcCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateVpcCidrBlock",r)
proc attachClassicLinkVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachClassicLinkVpc",r)
proc attachInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachInternetGateway",r)
proc attachNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachNetworkInterface",r)
proc attachVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachVolume",r)
proc attachVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachVpnGateway",r)
proc authorizeSecurityGroupEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AuthorizeSecurityGroupEgress",r)
proc authorizeSecurityGroupIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AuthorizeSecurityGroupIngress",r)
proc bundleInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "BundleInstance",r)
proc cancelBundleTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelBundleTask",r)
proc cancelConversionTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelConversionTask",r)
proc cancelExportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelExportTask",r)
proc cancelImportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelImportTask",r)
proc cancelReservedInstancesListing*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelReservedInstancesListing",r)
proc cancelSpotFleetRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelSpotFleetRequests",r)
proc cancelSpotInstanceRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelSpotInstanceRequests",r)
proc confirmProductInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ConfirmProductInstance",r)
proc copyFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopyFpgaImage",r)
proc copyImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopyImage",r)
proc copySnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopySnapshot",r)
proc createCustomerGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateCustomerGateway",r)
proc createDefaultSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDefaultSubnet",r)
proc createDefaultVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDefaultVpc",r)
proc createDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDhcpOptions",r)
proc createEgressOnlyInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateEgressOnlyInternetGateway",r)
proc createFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateFlowLogs",r)
proc createFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateFpgaImage",r)
proc createImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateImage",r)
proc createInstanceExportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateInstanceExportTask",r)
proc createInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateInternetGateway",r)
proc createKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateKeyPair",r)
proc createLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateLaunchTemplate",r)
proc createLaunchTemplateVersion*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateLaunchTemplateVersion",r)
proc createNatGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNatGateway",r)
proc createNetworkAcl*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkAcl",r)
proc createNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkAclEntry",r)
proc createNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkInterface",r)
proc createNetworkInterfacePermission*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkInterfacePermission",r)
proc createPlacementGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreatePlacementGroup",r)
proc createReservedInstancesListing*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateReservedInstancesListing",r)
proc createRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateRoute",r)
proc createRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateRouteTable",r)
proc createSecurityGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSecurityGroup",r)
proc createSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSnapshot",r)
proc createSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSpotDatafeedSubscription",r)
proc createSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSubnet",r)
proc createTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateTags",r)
proc createVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVolume",r)
proc createVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpc",r)
proc createVpcEndpoint*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpoint",r)
proc createVpcEndpointConnectionNotification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpointConnectionNotification",r)
proc createVpcEndpointServiceConfiguration*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpointServiceConfiguration",r)
proc createVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcPeeringConnection",r)
proc createVpnConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnConnection",r)
proc createVpnConnectionRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnConnectionRoute",r)
proc createVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnGateway",r)
proc deleteCustomerGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteCustomerGateway",r)
proc deleteDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteDhcpOptions",r)
proc deleteEgressOnlyInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteEgressOnlyInternetGateway",r)
proc deleteFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteFlowLogs",r)
proc deleteFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteFpgaImage",r)
proc deleteInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteInternetGateway",r)
proc deleteKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteKeyPair",r)
proc deleteLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteLaunchTemplate",r)
proc deleteLaunchTemplateVersions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteLaunchTemplateVersions",r)
proc deleteNatGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNatGateway",r)
proc deleteNetworkAcl*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkAcl",r)
proc deleteNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkAclEntry",r)
proc deleteNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkInterface",r)
proc deleteNetworkInterfacePermission*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkInterfacePermission",r)
proc deletePlacementGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeletePlacementGroup",r)
proc deleteRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteRoute",r)
proc deleteRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteRouteTable",r)
proc deleteSecurityGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSecurityGroup",r)
proc deleteSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSnapshot",r)
proc deleteSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSpotDatafeedSubscription",r)
proc deleteSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSubnet",r)
proc deleteTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteTags",r)
proc deleteVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVolume",r)
proc deleteVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpc",r)
proc deleteVpcEndpointConnectionNotifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpointConnectionNotifications",r)
proc deleteVpcEndpointServiceConfigurations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpointServiceConfigurations",r)
proc deleteVpcEndpoints*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpoints",r)
proc deleteVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcPeeringConnection",r)
proc deleteVpnConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnConnection",r)
proc deleteVpnConnectionRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnConnectionRoute",r)
proc deleteVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnGateway",r)
proc deregisterImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeregisterImage",r)
proc describeAccountAttributes*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAccountAttributes",r)
proc describeAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAddresses",r)
proc describeAvailabilityZones*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAvailabilityZones",r)
proc describeBundleTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeBundleTasks",r)
proc describeClassicLinkInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeClassicLinkInstances",r)
proc describeConversionTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeConversionTasks",r)
proc describeCustomerGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeCustomerGateways",r)
proc describeDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeDhcpOptions",r)
proc describeEgressOnlyInternetGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeEgressOnlyInternetGateways",r)
proc describeElasticGpus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeElasticGpus",r)
proc describeExportTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeExportTasks",r)
proc describeFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFlowLogs",r)
proc describeFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFpgaImageAttribute",r)
proc describeFpgaImages*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFpgaImages",r)
proc describeHostReservationOfferings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHostReservationOfferings",r)
proc describeHostReservations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHostReservations",r)
proc describeHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHosts",r)
proc describeIamInstanceProfileAssociations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIamInstanceProfileAssociations",r)
proc describeIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIdFormat",r)
proc describeIdentityIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIdentityIdFormat",r)
proc describeImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImageAttribute",r)
proc describeImages*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImages",r)
proc describeImportImageTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImportImageTasks",r)
proc describeImportSnapshotTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImportSnapshotTasks",r)
proc describeInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceAttribute",r)
proc describeInstanceCreditSpecifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceCreditSpecifications",r)
proc describeInstanceStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceStatus",r)
proc describeInternetGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInternetGateways",r)
proc describeKeyPairs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeKeyPairs",r)
proc describeLaunchTemplateVersions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeLaunchTemplateVersions",r)
proc describeLaunchTemplates*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeLaunchTemplates",r)
proc describeMovingAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeMovingAddresses",r)
proc describeNatGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNatGateways",r)
proc describeNetworkAcls*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkAcls",r)
proc describeNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfaceAttribute",r)
proc describeNetworkInterfacePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfacePermissions",r)
proc describeNetworkInterfaces*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfaces",r)
proc describePlacementGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribePlacementGroups",r)
proc describePrefixLists*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribePrefixLists",r)
proc describeRegions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeRegions",r)
proc describeReservedInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstances",r)
proc describeReservedInstancesListings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesListings",r)
proc describeReservedInstancesModifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesModifications",r)
proc describeReservedInstancesOfferings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesOfferings",r)
proc describeRouteTables*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeRouteTables",r)
proc describeScheduledInstanceAvailability*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeScheduledInstanceAvailability",r)
proc describeScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeScheduledInstances",r)
proc describeSecurityGroupReferences*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSecurityGroupReferences",r)
proc describeSecurityGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSecurityGroups",r)
proc describeSnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSnapshotAttribute",r)
proc describeSnapshots*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSnapshots",r)
proc describeSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotDatafeedSubscription",r)
proc describeSpotFleetInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetInstances",r)
proc describeSpotFleetRequestHistory*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetRequestHistory",r)
proc describeSpotFleetRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetRequests",r)
proc describeSpotInstanceRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotInstanceRequests",r)
proc describeSpotPriceHistory*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotPriceHistory",r)
proc describeStaleSecurityGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeStaleSecurityGroups",r)
proc describeSubnets*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSubnets",r)
proc describeTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeTags",r)
proc describeVolumeAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumeAttribute",r)
proc describeVolumeStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumeStatus",r)
proc describeVolumes*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumes",r)
proc describeVolumesModifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumesModifications",r)
proc describeVpcAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcAttribute",r)
proc describeVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcClassicLink",r)
proc describeVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcClassicLinkDnsSupport",r)
proc describeVpcEndpointConnectionNotifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointConnectionNotifications",r)
proc describeVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointConnections",r)
proc describeVpcEndpointServiceConfigurations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServiceConfigurations",r)
proc describeVpcEndpointServicePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServicePermissions",r)
proc describeVpcEndpointServices*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServices",r)
proc describeVpcEndpoints*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpoints",r)
proc describeVpcPeeringConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcPeeringConnections",r)
proc describeVpcs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcs",r)
proc describeVpnConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpnConnections",r)
proc describeVpnGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpnGateways",r)
proc detachClassicLinkVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachClassicLinkVpc",r)
proc detachInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachInternetGateway",r)
proc detachNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachNetworkInterface",r)
proc detachVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachVolume",r)
proc detachVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachVpnGateway",r)
proc disableVgwRoutePropagation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVgwRoutePropagation",r)
proc disableVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVpcClassicLink",r)
proc disableVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVpcClassicLinkDnsSupport",r)
proc disassociateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateAddress",r)
proc disassociateIamInstanceProfile*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateIamInstanceProfile",r)
proc disassociateRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateRouteTable",r)
proc disassociateSubnetCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateSubnetCidrBlock",r)
proc disassociateVpcCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateVpcCidrBlock",r)
proc enableVgwRoutePropagation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVgwRoutePropagation",r)
proc enableVolumeIO*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVolumeIO",r)
proc enableVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVpcClassicLink",r)
proc enableVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVpcClassicLinkDnsSupport",r)
proc getConsoleOutput*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetConsoleOutput",r)
proc getConsoleScreenshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetConsoleScreenshot",r)
proc getHostReservationPurchasePreview*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetHostReservationPurchasePreview",r)
proc getLaunchTemplateData*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetLaunchTemplateData",r)
proc getPasswordData*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetPasswordData",r)
proc getReservedInstancesExchangeQuote*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetReservedInstancesExchangeQuote",r)
proc importImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportImage",r)
proc importInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportInstance",r)
proc importKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportKeyPair",r)
proc importSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportSnapshot",r)
proc importVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportVolume",r)
proc modifyFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyFpgaImageAttribute",r)
proc modifyHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyHosts",r)
proc modifyIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyIdFormat",r)
proc modifyIdentityIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyIdentityIdFormat",r)
proc modifyImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyImageAttribute",r)
proc modifyInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstanceAttribute",r)
proc modifyInstanceCreditSpecification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstanceCreditSpecification",r)
proc modifyInstancePlacement*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstancePlacement",r)
proc modifyLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyLaunchTemplate",r)
proc modifyNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyNetworkInterfaceAttribute",r)
proc modifyReservedInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyReservedInstances",r)
proc modifySnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySnapshotAttribute",r)
proc modifySpotFleetRequest*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySpotFleetRequest",r)
proc modifySubnetAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySubnetAttribute",r)
proc modifyVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVolume",r)
proc modifyVolumeAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVolumeAttribute",r)
proc modifyVpcAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcAttribute",r)
proc modifyVpcEndpoint*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpoint",r)
proc modifyVpcEndpointConnectionNotification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointConnectionNotification",r)
proc modifyVpcEndpointServiceConfiguration*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointServiceConfiguration",r)
proc modifyVpcEndpointServicePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointServicePermissions",r)
proc modifyVpcPeeringConnectionOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcPeeringConnectionOptions",r)
proc modifyVpcTenancy*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcTenancy",r)
proc monitorInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "MonitorInstances",r)
proc moveAddressToVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "MoveAddressToVpc",r)
proc purchaseHostReservation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseHostReservation",r)
proc purchaseReservedInstancesOffering*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseReservedInstancesOffering",r)
proc purchaseScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseScheduledInstances",r)
proc rebootInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RebootInstances",r)
proc registerImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RegisterImage",r)
proc rejectVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RejectVpcEndpointConnections",r)
proc rejectVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RejectVpcPeeringConnection",r)
proc releaseAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReleaseAddress",r)
proc releaseHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReleaseHosts",r)
proc replaceIamInstanceProfileAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceIamInstanceProfileAssociation",r)
proc replaceNetworkAclAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceNetworkAclAssociation",r)
proc replaceNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceNetworkAclEntry",r)
proc replaceRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceRoute",r)
proc replaceRouteTableAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceRouteTableAssociation",r)
proc reportInstanceStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReportInstanceStatus",r)
proc requestSpotFleet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RequestSpotFleet",r)
proc requestSpotInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RequestSpotInstances",r)
proc resetFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetFpgaImageAttribute",r)
proc resetImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetImageAttribute",r)
proc resetInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetInstanceAttribute",r)
proc resetNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetNetworkInterfaceAttribute",r)
proc resetSnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetSnapshotAttribute",r)
proc restoreAddressToClassic*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RestoreAddressToClassic",r)
proc revokeSecurityGroupEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RevokeSecurityGroupEgress",r)
proc revokeSecurityGroupIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RevokeSecurityGroupIngress",r)
proc runInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RunInstances",r)
proc runScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RunScheduledInstances",r)
proc startInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "StartInstances",r)
proc stopInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "StopInstances",r)
proc terminateInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "TerminateInstances",r)
proc unassignIpv6Addresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnassignIpv6Addresses",r)
proc unassignPrivateIpAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnassignPrivateIpAddresses",r)
proc unmonitorInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnmonitorInstances",r)
proc updateSecurityGroupRuleDescriptionsEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UpdateSecurityGroupRuleDescriptionsEgress",r)
proc updateSecurityGroupRuleDescriptionsIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UpdateSecurityGroupRuleDescriptionsIngress",r)
