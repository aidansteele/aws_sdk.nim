# This file is autogenerated, do not modify
import json, asyncfutures
import utils/client
export client.new
const awsApiMD_apiVersion* = "2016-11-15"
const awsApiMD_endpointPrefix* = "ec2"
const awsApiMD_protocol* = "ec2"
const awsApiMD_serviceAbbreviation* = "Amazon EC2"
const awsApiMD_serviceFullName* = "Amazon Elastic Compute Cloud"
const awsApiMD_serviceId* = "EC2"
const awsApiMD_signatureVersion* = "v4"
const awsApiMD_uid* = "ec2-2016-11-15"
const awsApiMD_xmlNamespace* = "http://ec2.amazonaws.com/doc/2016-11-15"
defineClient(EC2)
proc acceptReservedInstancesExchangeQuote*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptReservedInstancesExchangeQuote", "POST", "/", r)
proc acceptVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptVpcEndpointConnections", "POST", "/", r)
proc acceptVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AcceptVpcPeeringConnection", "POST", "/", r)
proc allocateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AllocateAddress", "POST", "/", r)
proc allocateHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AllocateHosts", "POST", "/", r)
proc assignIpv6Addresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssignIpv6Addresses", "POST", "/", r)
proc assignPrivateIpAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssignPrivateIpAddresses", "POST", "/", r)
proc associateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateAddress", "POST", "/", r)
proc associateDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateDhcpOptions", "POST", "/", r)
proc associateIamInstanceProfile*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateIamInstanceProfile", "POST", "/", r)
proc associateRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateRouteTable", "POST", "/", r)
proc associateSubnetCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateSubnetCidrBlock", "POST", "/", r)
proc associateVpcCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AssociateVpcCidrBlock", "POST", "/", r)
proc attachClassicLinkVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachClassicLinkVpc", "POST", "/", r)
proc attachInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachInternetGateway", "POST", "/", r)
proc attachNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachNetworkInterface", "POST", "/", r)
proc attachVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachVolume", "POST", "/", r)
proc attachVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AttachVpnGateway", "POST", "/", r)
proc authorizeSecurityGroupEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AuthorizeSecurityGroupEgress", "POST", "/", r)
proc authorizeSecurityGroupIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "AuthorizeSecurityGroupIngress", "POST", "/", r)
proc bundleInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "BundleInstance", "POST", "/", r)
proc cancelBundleTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelBundleTask", "POST", "/", r)
proc cancelConversionTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelConversionTask", "POST", "/", r)
proc cancelExportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelExportTask", "POST", "/", r)
proc cancelImportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelImportTask", "POST", "/", r)
proc cancelReservedInstancesListing*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelReservedInstancesListing", "POST", "/", r)
proc cancelSpotFleetRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelSpotFleetRequests", "POST", "/", r)
proc cancelSpotInstanceRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CancelSpotInstanceRequests", "POST", "/", r)
proc confirmProductInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ConfirmProductInstance", "POST", "/", r)
proc copyFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopyFpgaImage", "POST", "/", r)
proc copyImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopyImage", "POST", "/", r)
proc copySnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CopySnapshot", "POST", "/", r)
proc createCustomerGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateCustomerGateway", "POST", "/", r)
proc createDefaultSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDefaultSubnet", "POST", "/", r)
proc createDefaultVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDefaultVpc", "POST", "/", r)
proc createDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateDhcpOptions", "POST", "/", r)
proc createEgressOnlyInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateEgressOnlyInternetGateway", "POST", "/", r)
proc createFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateFlowLogs", "POST", "/", r)
proc createFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateFpgaImage", "POST", "/", r)
proc createImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateImage", "POST", "/", r)
proc createInstanceExportTask*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateInstanceExportTask", "POST", "/", r)
proc createInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateInternetGateway", "POST", "/", r)
proc createKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateKeyPair", "POST", "/", r)
proc createLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateLaunchTemplate", "POST", "/", r)
proc createLaunchTemplateVersion*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateLaunchTemplateVersion", "POST", "/", r)
proc createNatGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNatGateway", "POST", "/", r)
proc createNetworkAcl*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkAcl", "POST", "/", r)
proc createNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkAclEntry", "POST", "/", r)
proc createNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkInterface", "POST", "/", r)
proc createNetworkInterfacePermission*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateNetworkInterfacePermission", "POST", "/", r)
proc createPlacementGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreatePlacementGroup", "POST", "/", r)
proc createReservedInstancesListing*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateReservedInstancesListing", "POST", "/", r)
proc createRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateRoute", "POST", "/", r)
proc createRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateRouteTable", "POST", "/", r)
proc createSecurityGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSecurityGroup", "POST", "/", r)
proc createSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSnapshot", "POST", "/", r)
proc createSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSpotDatafeedSubscription", "POST", "/", r)
proc createSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateSubnet", "POST", "/", r)
proc createTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateTags", "POST", "/", r)
proc createVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVolume", "POST", "/", r)
proc createVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpc", "POST", "/", r)
proc createVpcEndpoint*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpoint", "POST", "/", r)
proc createVpcEndpointConnectionNotification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpointConnectionNotification", "POST", "/", r)
proc createVpcEndpointServiceConfiguration*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcEndpointServiceConfiguration", "POST", "/", r)
proc createVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpcPeeringConnection", "POST", "/", r)
proc createVpnConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnConnection", "POST", "/", r)
proc createVpnConnectionRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnConnectionRoute", "POST", "/", r)
proc createVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "CreateVpnGateway", "POST", "/", r)
proc deleteCustomerGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteCustomerGateway", "POST", "/", r)
proc deleteDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteDhcpOptions", "POST", "/", r)
proc deleteEgressOnlyInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteEgressOnlyInternetGateway", "POST", "/", r)
proc deleteFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteFlowLogs", "POST", "/", r)
proc deleteFpgaImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteFpgaImage", "POST", "/", r)
proc deleteInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteInternetGateway", "POST", "/", r)
proc deleteKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteKeyPair", "POST", "/", r)
proc deleteLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteLaunchTemplate", "POST", "/", r)
proc deleteLaunchTemplateVersions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteLaunchTemplateVersions", "POST", "/", r)
proc deleteNatGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNatGateway", "POST", "/", r)
proc deleteNetworkAcl*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkAcl", "POST", "/", r)
proc deleteNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkAclEntry", "POST", "/", r)
proc deleteNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkInterface", "POST", "/", r)
proc deleteNetworkInterfacePermission*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteNetworkInterfacePermission", "POST", "/", r)
proc deletePlacementGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeletePlacementGroup", "POST", "/", r)
proc deleteRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteRoute", "POST", "/", r)
proc deleteRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteRouteTable", "POST", "/", r)
proc deleteSecurityGroup*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSecurityGroup", "POST", "/", r)
proc deleteSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSnapshot", "POST", "/", r)
proc deleteSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSpotDatafeedSubscription", "POST", "/", r)
proc deleteSubnet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteSubnet", "POST", "/", r)
proc deleteTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteTags", "POST", "/", r)
proc deleteVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVolume", "POST", "/", r)
proc deleteVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpc", "POST", "/", r)
proc deleteVpcEndpointConnectionNotifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpointConnectionNotifications", "POST", "/", r)
proc deleteVpcEndpointServiceConfigurations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpointServiceConfigurations", "POST", "/", r)
proc deleteVpcEndpoints*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcEndpoints", "POST", "/", r)
proc deleteVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpcPeeringConnection", "POST", "/", r)
proc deleteVpnConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnConnection", "POST", "/", r)
proc deleteVpnConnectionRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnConnectionRoute", "POST", "/", r)
proc deleteVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeleteVpnGateway", "POST", "/", r)
proc deregisterImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DeregisterImage", "POST", "/", r)
proc describeAccountAttributes*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAccountAttributes", "POST", "/", r)
proc describeAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAddresses", "POST", "/", r)
proc describeAvailabilityZones*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeAvailabilityZones", "POST", "/", r)
proc describeBundleTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeBundleTasks", "POST", "/", r)
proc describeClassicLinkInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeClassicLinkInstances", "POST", "/", r)
proc describeConversionTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeConversionTasks", "POST", "/", r)
proc describeCustomerGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeCustomerGateways", "POST", "/", r)
proc describeDhcpOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeDhcpOptions", "POST", "/", r)
proc describeEgressOnlyInternetGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeEgressOnlyInternetGateways", "POST", "/", r)
proc describeElasticGpus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeElasticGpus", "POST", "/", r)
proc describeExportTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeExportTasks", "POST", "/", r)
proc describeFlowLogs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFlowLogs", "POST", "/", r)
proc describeFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFpgaImageAttribute", "POST", "/", r)
proc describeFpgaImages*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeFpgaImages", "POST", "/", r)
proc describeHostReservationOfferings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHostReservationOfferings", "POST", "/", r)
proc describeHostReservations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHostReservations", "POST", "/", r)
proc describeHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeHosts", "POST", "/", r)
proc describeIamInstanceProfileAssociations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIamInstanceProfileAssociations", "POST", "/", r)
proc describeIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIdFormat", "POST", "/", r)
proc describeIdentityIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeIdentityIdFormat", "POST", "/", r)
proc describeImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImageAttribute", "POST", "/", r)
proc describeImages*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImages", "POST", "/", r)
proc describeImportImageTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImportImageTasks", "POST", "/", r)
proc describeImportSnapshotTasks*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeImportSnapshotTasks", "POST", "/", r)
proc describeInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceAttribute", "POST", "/", r)
proc describeInstanceCreditSpecifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceCreditSpecifications", "POST", "/", r)
proc describeInstanceStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstanceStatus", "POST", "/", r)
proc describeInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInstances", "POST", "/", r)
proc describeInternetGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeInternetGateways", "POST", "/", r)
proc describeKeyPairs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeKeyPairs", "POST", "/", r)
proc describeLaunchTemplateVersions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeLaunchTemplateVersions", "POST", "/", r)
proc describeLaunchTemplates*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeLaunchTemplates", "POST", "/", r)
proc describeMovingAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeMovingAddresses", "POST", "/", r)
proc describeNatGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNatGateways", "POST", "/", r)
proc describeNetworkAcls*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkAcls", "POST", "/", r)
proc describeNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfaceAttribute", "POST", "/", r)
proc describeNetworkInterfacePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfacePermissions", "POST", "/", r)
proc describeNetworkInterfaces*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeNetworkInterfaces", "POST", "/", r)
proc describePlacementGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribePlacementGroups", "POST", "/", r)
proc describePrefixLists*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribePrefixLists", "POST", "/", r)
proc describeRegions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeRegions", "POST", "/", r)
proc describeReservedInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstances", "POST", "/", r)
proc describeReservedInstancesListings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesListings", "POST", "/", r)
proc describeReservedInstancesModifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesModifications", "POST", "/", r)
proc describeReservedInstancesOfferings*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeReservedInstancesOfferings", "POST", "/", r)
proc describeRouteTables*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeRouteTables", "POST", "/", r)
proc describeScheduledInstanceAvailability*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeScheduledInstanceAvailability", "POST", "/", r)
proc describeScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeScheduledInstances", "POST", "/", r)
proc describeSecurityGroupReferences*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSecurityGroupReferences", "POST", "/", r)
proc describeSecurityGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSecurityGroups", "POST", "/", r)
proc describeSnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSnapshotAttribute", "POST", "/", r)
proc describeSnapshots*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSnapshots", "POST", "/", r)
proc describeSpotDatafeedSubscription*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotDatafeedSubscription", "POST", "/", r)
proc describeSpotFleetInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetInstances", "POST", "/", r)
proc describeSpotFleetRequestHistory*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetRequestHistory", "POST", "/", r)
proc describeSpotFleetRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotFleetRequests", "POST", "/", r)
proc describeSpotInstanceRequests*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotInstanceRequests", "POST", "/", r)
proc describeSpotPriceHistory*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSpotPriceHistory", "POST", "/", r)
proc describeStaleSecurityGroups*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeStaleSecurityGroups", "POST", "/", r)
proc describeSubnets*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeSubnets", "POST", "/", r)
proc describeTags*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeTags", "POST", "/", r)
proc describeVolumeAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumeAttribute", "POST", "/", r)
proc describeVolumeStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumeStatus", "POST", "/", r)
proc describeVolumes*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumes", "POST", "/", r)
proc describeVolumesModifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVolumesModifications", "POST", "/", r)
proc describeVpcAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcAttribute", "POST", "/", r)
proc describeVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcClassicLink", "POST", "/", r)
proc describeVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcClassicLinkDnsSupport", "POST", "/", r)
proc describeVpcEndpointConnectionNotifications*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointConnectionNotifications", "POST", "/", r)
proc describeVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointConnections", "POST", "/", r)
proc describeVpcEndpointServiceConfigurations*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServiceConfigurations", "POST", "/", r)
proc describeVpcEndpointServicePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServicePermissions", "POST", "/", r)
proc describeVpcEndpointServices*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpointServices", "POST", "/", r)
proc describeVpcEndpoints*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcEndpoints", "POST", "/", r)
proc describeVpcPeeringConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcPeeringConnections", "POST", "/", r)
proc describeVpcs*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpcs", "POST", "/", r)
proc describeVpnConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpnConnections", "POST", "/", r)
proc describeVpnGateways*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DescribeVpnGateways", "POST", "/", r)
proc detachClassicLinkVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachClassicLinkVpc", "POST", "/", r)
proc detachInternetGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachInternetGateway", "POST", "/", r)
proc detachNetworkInterface*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachNetworkInterface", "POST", "/", r)
proc detachVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachVolume", "POST", "/", r)
proc detachVpnGateway*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DetachVpnGateway", "POST", "/", r)
proc disableVgwRoutePropagation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVgwRoutePropagation", "POST", "/", r)
proc disableVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVpcClassicLink", "POST", "/", r)
proc disableVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisableVpcClassicLinkDnsSupport", "POST", "/", r)
proc disassociateAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateAddress", "POST", "/", r)
proc disassociateIamInstanceProfile*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateIamInstanceProfile", "POST", "/", r)
proc disassociateRouteTable*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateRouteTable", "POST", "/", r)
proc disassociateSubnetCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateSubnetCidrBlock", "POST", "/", r)
proc disassociateVpcCidrBlock*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "DisassociateVpcCidrBlock", "POST", "/", r)
proc enableVgwRoutePropagation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVgwRoutePropagation", "POST", "/", r)
proc enableVolumeIO*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVolumeIO", "POST", "/", r)
proc enableVpcClassicLink*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVpcClassicLink", "POST", "/", r)
proc enableVpcClassicLinkDnsSupport*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "EnableVpcClassicLinkDnsSupport", "POST", "/", r)
proc getConsoleOutput*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetConsoleOutput", "POST", "/", r)
proc getConsoleScreenshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetConsoleScreenshot", "POST", "/", r)
proc getHostReservationPurchasePreview*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetHostReservationPurchasePreview", "POST", "/", r)
proc getLaunchTemplateData*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetLaunchTemplateData", "POST", "/", r)
proc getPasswordData*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetPasswordData", "POST", "/", r)
proc getReservedInstancesExchangeQuote*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "GetReservedInstancesExchangeQuote", "POST", "/", r)
proc importImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportImage", "POST", "/", r)
proc importInstance*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportInstance", "POST", "/", r)
proc importKeyPair*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportKeyPair", "POST", "/", r)
proc importSnapshot*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportSnapshot", "POST", "/", r)
proc importVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ImportVolume", "POST", "/", r)
proc modifyFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyFpgaImageAttribute", "POST", "/", r)
proc modifyHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyHosts", "POST", "/", r)
proc modifyIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyIdFormat", "POST", "/", r)
proc modifyIdentityIdFormat*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyIdentityIdFormat", "POST", "/", r)
proc modifyImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyImageAttribute", "POST", "/", r)
proc modifyInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstanceAttribute", "POST", "/", r)
proc modifyInstanceCreditSpecification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstanceCreditSpecification", "POST", "/", r)
proc modifyInstancePlacement*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyInstancePlacement", "POST", "/", r)
proc modifyLaunchTemplate*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyLaunchTemplate", "POST", "/", r)
proc modifyNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyNetworkInterfaceAttribute", "POST", "/", r)
proc modifyReservedInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyReservedInstances", "POST", "/", r)
proc modifySnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySnapshotAttribute", "POST", "/", r)
proc modifySpotFleetRequest*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySpotFleetRequest", "POST", "/", r)
proc modifySubnetAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifySubnetAttribute", "POST", "/", r)
proc modifyVolume*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVolume", "POST", "/", r)
proc modifyVolumeAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVolumeAttribute", "POST", "/", r)
proc modifyVpcAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcAttribute", "POST", "/", r)
proc modifyVpcEndpoint*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpoint", "POST", "/", r)
proc modifyVpcEndpointConnectionNotification*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointConnectionNotification", "POST", "/", r)
proc modifyVpcEndpointServiceConfiguration*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointServiceConfiguration", "POST", "/", r)
proc modifyVpcEndpointServicePermissions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcEndpointServicePermissions", "POST", "/", r)
proc modifyVpcPeeringConnectionOptions*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcPeeringConnectionOptions", "POST", "/", r)
proc modifyVpcTenancy*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ModifyVpcTenancy", "POST", "/", r)
proc monitorInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "MonitorInstances", "POST", "/", r)
proc moveAddressToVpc*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "MoveAddressToVpc", "POST", "/", r)
proc purchaseHostReservation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseHostReservation", "POST", "/", r)
proc purchaseReservedInstancesOffering*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseReservedInstancesOffering", "POST", "/", r)
proc purchaseScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "PurchaseScheduledInstances", "POST", "/", r)
proc rebootInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RebootInstances", "POST", "/", r)
proc registerImage*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RegisterImage", "POST", "/", r)
proc rejectVpcEndpointConnections*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RejectVpcEndpointConnections", "POST", "/", r)
proc rejectVpcPeeringConnection*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RejectVpcPeeringConnection", "POST", "/", r)
proc releaseAddress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReleaseAddress", "POST", "/", r)
proc releaseHosts*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReleaseHosts", "POST", "/", r)
proc replaceIamInstanceProfileAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceIamInstanceProfileAssociation", "POST", "/", r)
proc replaceNetworkAclAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceNetworkAclAssociation", "POST", "/", r)
proc replaceNetworkAclEntry*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceNetworkAclEntry", "POST", "/", r)
proc replaceRoute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceRoute", "POST", "/", r)
proc replaceRouteTableAssociation*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReplaceRouteTableAssociation", "POST", "/", r)
proc reportInstanceStatus*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ReportInstanceStatus", "POST", "/", r)
proc requestSpotFleet*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RequestSpotFleet", "POST", "/", r)
proc requestSpotInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RequestSpotInstances", "POST", "/", r)
proc resetFpgaImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetFpgaImageAttribute", "POST", "/", r)
proc resetImageAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetImageAttribute", "POST", "/", r)
proc resetInstanceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetInstanceAttribute", "POST", "/", r)
proc resetNetworkInterfaceAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetNetworkInterfaceAttribute", "POST", "/", r)
proc resetSnapshotAttribute*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "ResetSnapshotAttribute", "POST", "/", r)
proc restoreAddressToClassic*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RestoreAddressToClassic", "POST", "/", r)
proc revokeSecurityGroupEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RevokeSecurityGroupEgress", "POST", "/", r)
proc revokeSecurityGroupIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RevokeSecurityGroupIngress", "POST", "/", r)
proc runInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RunInstances", "POST", "/", r)
proc runScheduledInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "RunScheduledInstances", "POST", "/", r)
proc startInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "StartInstances", "POST", "/", r)
proc stopInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "StopInstances", "POST", "/", r)
proc terminateInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "TerminateInstances", "POST", "/", r)
proc unassignIpv6Addresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnassignIpv6Addresses", "POST", "/", r)
proc unassignPrivateIpAddresses*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnassignPrivateIpAddresses", "POST", "/", r)
proc unmonitorInstances*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UnmonitorInstances", "POST", "/", r)
proc updateSecurityGroupRuleDescriptionsEgress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UpdateSecurityGroupRuleDescriptionsEgress", "POST", "/", r)
proc updateSecurityGroupRuleDescriptionsIngress*(cl: EC2, r: JsonNode): Future[JsonNode] = sendEC2Request(cl, "UpdateSecurityGroupRuleDescriptionsIngress", "POST", "/", r)
