# This file is autogenerated, do not modify
import packedjson, asyncfutures
import utils/client
export client.new
const awsApiMD_apiVersion* = "2015-10-01"
const awsApiMD_endpointPrefix* = "gamelift"
const awsApiMD_jsonVersion* = "1.1"
const awsApiMD_protocol* = "json"
const awsApiMD_serviceFullName* = "Amazon GameLift"
const awsApiMD_signatureVersion* = "v4"
const awsApiMD_targetPrefix* = "GameLift"
const awsApiMD_uid* = "gamelift-2015-10-01"
defineClient(GameLift)
proc acceptMatch*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "AcceptMatch", "POST", "/", r)
proc createAlias*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateAlias", "POST", "/", r)
proc createBuild*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateBuild", "POST", "/", r)
proc createFleet*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateFleet", "POST", "/", r)
proc createGameSession*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateGameSession", "POST", "/", r)
proc createGameSessionQueue*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateGameSessionQueue", "POST", "/", r)
proc createMatchmakingConfiguration*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateMatchmakingConfiguration", "POST", "/", r)
proc createMatchmakingRuleSet*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateMatchmakingRuleSet", "POST", "/", r)
proc createPlayerSession*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreatePlayerSession", "POST", "/", r)
proc createPlayerSessions*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreatePlayerSessions", "POST", "/", r)
proc createVpcPeeringAuthorization*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateVpcPeeringAuthorization", "POST", "/", r)
proc createVpcPeeringConnection*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "CreateVpcPeeringConnection", "POST", "/", r)
proc deleteAlias*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteAlias", "POST", "/", r)
proc deleteBuild*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteBuild", "POST", "/", r)
proc deleteFleet*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteFleet", "POST", "/", r)
proc deleteGameSessionQueue*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteGameSessionQueue", "POST", "/", r)
proc deleteMatchmakingConfiguration*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteMatchmakingConfiguration", "POST", "/", r)
proc deleteScalingPolicy*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteScalingPolicy", "POST", "/", r)
proc deleteVpcPeeringAuthorization*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteVpcPeeringAuthorization", "POST", "/", r)
proc deleteVpcPeeringConnection*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DeleteVpcPeeringConnection", "POST", "/", r)
proc describeAlias*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeAlias", "POST", "/", r)
proc describeBuild*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeBuild", "POST", "/", r)
proc describeEC2InstanceLimits*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeEC2InstanceLimits", "POST", "/", r)
proc describeFleetAttributes*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeFleetAttributes", "POST", "/", r)
proc describeFleetCapacity*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeFleetCapacity", "POST", "/", r)
proc describeFleetEvents*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeFleetEvents", "POST", "/", r)
proc describeFleetPortSettings*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeFleetPortSettings", "POST", "/", r)
proc describeFleetUtilization*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeFleetUtilization", "POST", "/", r)
proc describeGameSessionDetails*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeGameSessionDetails", "POST", "/", r)
proc describeGameSessionPlacement*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeGameSessionPlacement", "POST", "/", r)
proc describeGameSessionQueues*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeGameSessionQueues", "POST", "/", r)
proc describeGameSessions*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeGameSessions", "POST", "/", r)
proc describeInstances*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeInstances", "POST", "/", r)
proc describeMatchmaking*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeMatchmaking", "POST", "/", r)
proc describeMatchmakingConfigurations*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeMatchmakingConfigurations", "POST", "/", r)
proc describeMatchmakingRuleSets*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeMatchmakingRuleSets", "POST", "/", r)
proc describePlayerSessions*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribePlayerSessions", "POST", "/", r)
proc describeRuntimeConfiguration*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeRuntimeConfiguration", "POST", "/", r)
proc describeScalingPolicies*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeScalingPolicies", "POST", "/", r)
proc describeVpcPeeringAuthorizations*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeVpcPeeringAuthorizations", "POST", "/", r)
proc describeVpcPeeringConnections*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "DescribeVpcPeeringConnections", "POST", "/", r)
proc getGameSessionLogUrl*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "GetGameSessionLogUrl", "POST", "/", r)
proc getInstanceAccess*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "GetInstanceAccess", "POST", "/", r)
proc listAliases*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "ListAliases", "POST", "/", r)
proc listBuilds*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "ListBuilds", "POST", "/", r)
proc listFleets*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "ListFleets", "POST", "/", r)
proc putScalingPolicy*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "PutScalingPolicy", "POST", "/", r)
proc requestUploadCredentials*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "RequestUploadCredentials", "POST", "/", r)
proc resolveAlias*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "ResolveAlias", "POST", "/", r)
proc searchGameSessions*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "SearchGameSessions", "POST", "/", r)
proc startGameSessionPlacement*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "StartGameSessionPlacement", "POST", "/", r)
proc startMatchmaking*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "StartMatchmaking", "POST", "/", r)
proc stopGameSessionPlacement*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "StopGameSessionPlacement", "POST", "/", r)
proc stopMatchmaking*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "StopMatchmaking", "POST", "/", r)
proc updateAlias*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateAlias", "POST", "/", r)
proc updateBuild*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateBuild", "POST", "/", r)
proc updateFleetAttributes*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateFleetAttributes", "POST", "/", r)
proc updateFleetCapacity*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateFleetCapacity", "POST", "/", r)
proc updateFleetPortSettings*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateFleetPortSettings", "POST", "/", r)
proc updateGameSession*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateGameSession", "POST", "/", r)
proc updateGameSessionQueue*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateGameSessionQueue", "POST", "/", r)
proc updateMatchmakingConfiguration*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateMatchmakingConfiguration", "POST", "/", r)
proc updateRuntimeConfiguration*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "UpdateRuntimeConfiguration", "POST", "/", r)
proc validateMatchmakingRuleSet*(cl: GameLift, r: JsonNode): Future[JsonNode] = sendJsonRequest(cl, "ValidateMatchmakingRuleSet", "POST", "/", r)
